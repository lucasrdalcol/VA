function [allData, scenario, sensors] = scenario_with_errors_test1()
%scenario_with_errors_test1 - Returns sensor detections
%    allData = scenario_with_errors_test1 returns sensor detections in a structure
%    with time for an internally defined scenario and sensor suite.
%
%    [allData, scenario, sensors] = scenario_with_errors_test1 optionally returns
%    the drivingScenario and detection generator objects.

% Generated by MATLAB(R) 9.11 (R2021b) and Automated Driving Toolbox 3.4 (R2021b).
% Generated on: 11-Dec-2021 18:44:05

% Create the drivingScenario object and ego car
[scenario, egoVehicle] = createDrivingScenario;

% Create all the sensors
[sensors, numSensors] = createSensors(scenario);

allData = struct('Time', {}, 'ActorPoses', {}, 'ObjectDetections', {}, 'LaneDetections', {}, 'PointClouds', {}, 'INSMeasurements', {});
running = true;
while running

    % Generate the target poses of all actors relative to the ego vehicle
    poses = targetPoses(egoVehicle);
    % Get the state of the ego vehicle
    actorState = state(egoVehicle);
    time  = scenario.SimulationTime;

    objectDetections = {};
    laneDetections   = [];
    ptClouds = {};
    insMeas = {};
    isValidTime = false(1, numSensors);
    isValidLaneTime = false(1, numSensors);
    isValidPointCloudTime = false(1, numSensors);
    isValidINSTime = false(1, numSensors);

    % Generate detections for each sensor
    for sensorIndex = 1:numSensors
        sensor = sensors{sensorIndex};
        % Generate the ego vehicle lane boundaries
        if isa(sensor, 'visionDetectionGenerator')
            maxLaneDetectionRange = min(500,sensor.MaxRange);
            lanes = laneBoundaries(egoVehicle, 'XDistance', linspace(-maxLaneDetectionRange, maxLaneDetectionRange, 101));
        end
        type = getDetectorOutput(sensor);
        if strcmp(type, 'Objects only')
            [objectDets, numObjects, isValidTime(sensorIndex)] = sensor(poses, time);
            objectDetections = [objectDetections; objectDets(1:numObjects)]; %#ok<AGROW>
        elseif strcmp(type, 'Lanes only')
            [laneDets, ~, isValidTime(sensorIndex)] = sensor(lanes, time);
            laneDetections   = [laneDetections laneDets]; %#ok<AGROW>
        elseif strcmp(type, 'Lanes and objects')
            [objectDets, numObjects, isValidTime(sensorIndex), laneDets, ~, isValidLaneTime(sensorIndex)] = sensor(poses, lanes, time);
            objectDetections = [objectDetections; objectDets(1:numObjects)]; %#ok<AGROW>
            laneDetections   = [laneDetections laneDets]; %#ok<AGROW>
        elseif strcmp(type, 'Lanes with occlusion')
            [laneDets, ~, isValidLaneTime(sensorIndex)] = sensor(poses, lanes, time);
            laneDetections   = [laneDetections laneDets]; %#ok<AGROW>
        elseif strcmp(type, 'PointCloud')
            if sensor.HasRoadsInputPort
                rdmesh = roadMesh(egoVehicle,min(500,sensor.MaxRange));
                [ptCloud, isValidPointCloudTime(sensorIndex)] = sensor(poses, rdmesh, time);
            else
                [ptCloud, isValidPointCloudTime(sensorIndex)] = sensor(poses, time);
            end
            ptClouds = [ptClouds; ptCloud]; %#ok<AGROW>
        elseif strcmp(type, 'INSMeasurement')
            insMeasCurrent = sensor(actorState, time);
            insMeas = [insMeas; insMeasCurrent]; %#ok<AGROW>
            isValidINSTime(sensorIndex) = true;
        end
    end

    % Aggregate all detections into a structure for later use
    if any(isValidTime) || any(isValidLaneTime) || any(isValidPointCloudTime) || any(isValidINSTime)
        allData(end + 1) = struct( ...
            'Time',       scenario.SimulationTime, ...
            'ActorPoses', actorPoses(scenario), ...
            'ObjectDetections', {objectDetections}, ...
            'LaneDetections', {laneDetections}, ...
            'PointClouds',   {ptClouds}, ... %#ok<AGROW>
            'INSMeasurements',   {insMeas}); %#ok<AGROW>
    end

    % Advance the scenario one time step and exit the loop if the scenario is complete
    running = advance(scenario);
end

% Restart the driving scenario to return the actors to their initial positions.
restart(scenario);

% Release all the sensor objects so they can be used again.
for sensorIndex = 1:numSensors
    release(sensors{sensorIndex});
end

%%%%%%%%%%%%%%%%%%%%
% Helper functions %
%%%%%%%%%%%%%%%%%%%%

% Units used in createSensors and createDrivingScenario
% Distance/Position - meters
% Speed             - meters/second
% Angles            - degrees
% RCS Pattern       - dBsm

function [sensors, numSensors] = createSensors(scenario)
% createSensors Returns all sensor objects to generate detections

% Assign into each sensor the physical and radar profiles for all actors
profiles = actorProfiles(scenario);
sensors{1} = drivingRadarDataGenerator('SensorIndex', 1, ...
    'MountingLocation', [3.7 0 0.2], ...
    'RangeLimits', [0 100], ...
    'TargetReportFormat', 'Detections', ...
    'Profiles', profiles);
sensors{2} = visionDetectionGenerator('SensorIndex', 2, ...
    'SensorLocation', [1.9 0], ...
    'DetectorOutput', 'Lanes and objects', ...
    'Intrinsics', cameraIntrinsics([1600 1600],[960 540],[1080 1920]), ...
    'ActorProfiles', profiles);
sensors{3} = insSensor('TimeInput', true);
sensors{4} = visionDetectionGenerator('SensorIndex', 4, ...
    'SensorLocation', [2.8 0.9], ...
    'Yaw', 61.5, ...
    'MaxRange', 30, ...
    'DetectorOutput', 'Objects only', ...
    'Intrinsics', cameraIntrinsics([1600 1600],[960 540],[1080 1920]), ...
    'ActorProfiles', profiles);
sensors{5} = visionDetectionGenerator('SensorIndex', 5, ...
    'SensorLocation', [2.8 -0.9], ...
    'Yaw', -61.5, ...
    'MaxRange', 30, ...
    'DetectorOutput', 'Objects only', ...
    'Intrinsics', cameraIntrinsics([1600 1600],[960 540],[1080 1920]), ...
    'ActorProfiles', profiles);
numSensors = 5;

function [scenario, egoVehicle] = createDrivingScenario
% createDrivingScenario Returns the drivingScenario defined in the Designer

% Construct a drivingScenario object.
scenario = drivingScenario;

% Add all road segments
roadCenters = [54.8 26.2 0;
    39.8 41.8 0;
    7.7 15.7 0;
    -16.3 36 0;
    -45.5 20.5 0;
    -46.8 -27.6 0;
    -20.2 -44.2 0;
    6.9 -15.4 0;
    40.1 -35.9 0;
    50.7 -16 0;
    54.8 26.2 0];
marking = [laneMarking('Solid')
    laneMarking('Dashed')
    laneMarking('Solid')];
laneSpecification = lanespec(2, 'Marking', marking);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Road');

% Add the barriers
barrierCenters = [32.8 -40 0;
    38.1 -41.4 0;
    45 -39.3 0;
    49.9 -34.9 0;
    52.2 -31.3 0;
    54.8 -23.9 0];
barrier(scenario, barrierCenters, ...
    'ClassID', 5, ...
    'Width', 0.61, ...
    'Height', 0.81, ...
    'Mesh', driving.scenario.jerseyBarrierMesh, 'PlotColor', [0.65 0.65 0.65], 'Name', 'Jersey Barrier');

barrierCenters = [60.5 25 0;
    58.6 32.6 0;
    54.5 40 0;
    49.7 44.4 0;
    43.3 46.3 0;
    36.8 46.4 0;
    30.2 44.5 0;
    25.1 40.4 0];
barrier(scenario, barrierCenters, ...
    'ClassID', 5, ...
    'Width', 0.61, ...
    'Height', 0.81, ...
    'Mesh', driving.scenario.jerseyBarrierMesh, 'PlotColor', [0.65 0.65 0.65], 'Name', 'Jersey Barrier1');

barrierCenters = [24.3 19.3 0;
    22.4 16.3 0;
    17.7 13.1 0;
    12.9 11.7 0;
    8.8 11.2 0;
    3.1 11.4 0;
    -0.9 12.3 0;
    -4.3 15 0;
    -8.1 18.8 0];
barrier(scenario, barrierCenters, ...
    'ClassID', 5, ...
    'Width', 0.61, ...
    'Height', 0.81, ...
    'Mesh', driving.scenario.jerseyBarrierMesh, 'PlotColor', [0.65 0.65 0.65], 'Name', 'Jersey Barrier2');

% Add the ego vehicle
egoVehicle = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [-27.45 -47.05 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'Car');
waypoints = [-27.45 -47.05 0;
    -19.7 -45.7 0;
    -13 -40 0;
    -7.6 -32.9 0;
    -3.2 -24.4 0;
    2.1 -18.8 0;
    9.1 -17 0;
    15.3 -20.7 0;
    19.8 -25.7 0;
    23.6 -29.7 0;
    28.3 -34.5 0;
    35.3 -37.9 0;
    41.3 -37.9 0;
    46.5 -34.1 0;
    50.6 -25.9 0;
    53.9 -10 0;
    56.6 7.4 0;
    57.5 15.6 0;
    56.8 24.5 0;
    54.8 33.5 0;
    49.8 40 0;
    45 43.2 0;
    40.3 43.6 0;
    33 41.4 0;
    28.8 37.7 0;
    24.8 33 0;
    21.5 27.7 0;
    18.6 23.9 0;
    13.8 19.2 0;
    8.9 17.9 0;
    3.8 19.4 0;
    -1.7 22.3 0;
    -5.6 28 0;
    -9.5 33.5 0;
    -14.2 36.8 0;
    -20 38.6 0;
    -25.1 39.5 0;
    -29.1 38.6 0;
    -34.8 36.5 0;
    -38.8 33.5 0;
    -43.9 27.7 0;
    -46.8 23.2 0;
    -48.8 16.4 0;
    -51.8 9.4 0;
    -52.6 1.2 0;
    -53 -7.7 0;
    -52.4 -17 0;
    -51.2 -21.2 0;
    -48.6 -28.3 0;
    -46.2 -34.2 0;
    -42.6 -38.9 0;
    -38.9 -42.1 0;
    -35.7 -45 0;
    -31.7 -46.6 0;
    -25.8 -47.2 0];
speed = [20;20;20;20;20;20;20;20;20;20;20;20;20;20;20;20;20;20;20;20;20;20;20;20;20;20;20;20;20;20;20;20;20;20;20;20;20;20;20;20;20;20;20;20;20;20;20;20;20;20;20;20;20;20;20];
smoothTrajectory(egoVehicle, waypoints, speed);

% Add the non-ego actors
vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [7.06 -23.92 0], ...
    'Yaw', 103, ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'Car1');

vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [18.69 35.43 0], ...
    'Yaw', -28, ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'Car2');

vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [-28.93 45.51 0], ...
    'Yaw', -69, ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'Car3');

actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.24, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [23.9 26.8 0], ...
    'RCSPattern', [-8 -8;-8 -8], ...
    'Mesh', driving.scenario.pedestrianMesh, ...
    'Name', 'Pedestrian');

actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.24, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [-4.3 32.7 0], ...
    'RCSPattern', [-8 -8;-8 -8], ...
    'Mesh', driving.scenario.pedestrianMesh, ...
    'Name', 'Pedestrian1');

actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.24, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [49.2 -11.6 0], ...
    'RCSPattern', [-8 -8;-8 -8], ...
    'Mesh', driving.scenario.pedestrianMesh, ...
    'Name', 'Pedestrian2');

vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [46.69 32.08 0], ...
    'Yaw', -57, ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'Car4');

actor(scenario, ...
    'ClassID', 3, ...
    'Length', 1.7, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [-29.2 -39.5 0], ...
    'Yaw', 158, ...
    'Mesh', driving.scenario.bicycleMesh, ...
    'Name', 'Bicycle');

actor(scenario, ...
    'ClassID', 3, ...
    'Length', 1.7, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [-29.9 30.7 0], ...
    'Yaw', 120, ...
    'Mesh', driving.scenario.bicycleMesh, ...
    'Name', 'Bicycle1');

actor(scenario, ...
    'ClassID', 3, ...
    'Length', 1.7, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [16.8 -12.3 0], ...
    'Yaw', 92, ...
    'Mesh', driving.scenario.bicycleMesh, ...
    'Name', 'Bicycle2');

actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.24, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [20.19 -29.73 0], ...
    'RCSPattern', [-8 -8;-8 -8], ...
    'Mesh', driving.scenario.pedestrianMesh, ...
    'Name', 'Pedestrian3');

actor(scenario, ...
    'ClassID', 3, ...
    'Length', 1.7, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [-45.9 -8.3 0], ...
    'Mesh', driving.scenario.bicycleMesh, ...
    'Name', 'Bicycle3');

car5 = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [-11.47 -31.35 0.01], ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'Car5');
waypoints = [-11.47 -31.35 0.01;
    -7.9 -24.2 0;
    -3.3 -18.2 0;
    1.4 -14.4 0;
    8.3 -12.9 0;
    12.9 -14.2 0;
    18.8 -19.1 0;
    23.9 -25.3 0;
    28.6 -30.1 0;
    34.1 -33.6 0;
    40 -34.1 0;
    46.2 -28.8 0;
    48.9 -18.9 0;
    52.2 -13.8 0;
    52.4 -5.9 0;
    51.8 -0.8 0;
    54.2 12 0;
    54.4 20.5 0;
    52.2 29.7 0;
    49.1 35.7 0;
    44.8 39.2 0;
    38.6 39.7 0;
    32.7 37.9 0;
    27.9 34.2 0;
    24.8 31.2 0;
    21.2 28.3 0;
    17.9 23.6 0;
    17.4 20.5 0;
    14.5 17 0;
    11.5 15.6 0;
    5.4 15.3 0;
    -0.6 17.9 0;
    -5.9 22.7 0;
    -10.3 29.5 0;
    -14.5 32.7 0;
    -18.8 35 0;
    -25.3 35.9 0;
    -30.1 34.5 0;
    -36.5 30.9 0;
    -40.7 24.5 0;
    -45.1 18 0;
    -47.1 11.1 0;
    -48.8 3.8 0;
    -49.8 -6.4 0;
    -48.5 -16.5 0;
    -47 -22.4 0;
    -44.8 -28.9 0;
    -41.7 -34.5 0;
    -38.2 -38.5 0;
    -33.9 -42.2 0;
    -27.6 -43.3 0;
    -22.4 -42.9 0;
    -17.1 -40.4 0;
    -15.3 -37.1 0;
    -11.2 -29.8 0];
speed = [30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30];
trajectory(car5, waypoints, speed);

function output = getDetectorOutput(sensor)

if isa(sensor, 'visionDetectionGenerator')
    output = sensor.DetectorOutput;
elseif isa(sensor, 'lidarPointCloudGenerator')
    output = 'PointCloud';
elseif isa(sensor, 'insSensor')
    output = 'INSMeasurement';
else
    output = 'Objects only';
end

